// Package controller provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package controller

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for EvaluationFailureErrorCode.
const (
	GENERAL             EvaluationFailureErrorCode = "GENERAL"
	INVALIDCONTEXT      EvaluationFailureErrorCode = "INVALID_CONTEXT"
	PARSEERROR          EvaluationFailureErrorCode = "PARSE_ERROR"
	TARGETINGKEYMISSING EvaluationFailureErrorCode = "TARGETING_KEY_MISSING"
)

// Defines values for EvaluationSuccessReason.
const (
	DISABLED       EvaluationSuccessReason = "DISABLED"
	SPLIT          EvaluationSuccessReason = "SPLIT"
	STATIC         EvaluationSuccessReason = "STATIC"
	TARGETINGMATCH EvaluationSuccessReason = "TARGETING_MATCH"
	UNKNOWN        EvaluationSuccessReason = "UNKNOWN"
)

// Defines values for FlagNotFoundErrorCode.
const (
	FLAGNOTFOUND FlagNotFoundErrorCode = "FLAG_NOT_FOUND"
)

// Defines values for V1GeneralErrorResponseErrorCode.
const (
	INVALIDPARAM V1GeneralErrorResponseErrorCode = "INVALID_PARAM"
)

// UserFlexFeatureServiceRuleUpdateBody defines model for UserFlexFeatureServiceRuleUpdateBody.
type UserFlexFeatureServiceRuleUpdateBody struct {
	Rule V1Rule `json:"rule"`
}

// BooleanFlag A boolean typed flag value
type BooleanFlag struct {
	// Value Flag evaluation result
	Value bool `json:"value"`
}

// BulkEvaluationFailure Bulk evaluation failure response
type BulkEvaluationFailure struct {
	// ErrorCode An appropriate  code specific to the bulk evaluation error. See https://openfeature.dev/specification/types#error-code
	ErrorCode string `json:"errorCode"`

	// ErrorDetails Optional error details description for logging or other needs
	ErrorDetails *string `json:"errorDetails,omitempty"`
}

// BulkEvaluationRequest Evaluate multiple flags in one request
type BulkEvaluationRequest struct {
	// Context Context information for flag evaluation
	Context *Context `json:"context,omitempty"`
}

// BulkEvaluationSuccess Success response for the bulk evaluation request
type BulkEvaluationSuccess struct {
	Flags *[]BulkEvaluationSuccess_Flags_Item `json:"flags,omitempty"`
}

// BulkEvaluationSuccess_Flags_Item defines model for bulkEvaluationSuccess.flags.Item.
type BulkEvaluationSuccess_Flags_Item struct {
	union json.RawMessage
}

// ConfigurationResponse OFREP metadata response
type ConfigurationResponse struct {
	// Capabilities Capabilities of the flag management system and how to configure them in the provider.
	Capabilities *struct {
		// CacheInvalidation Configuration for the cache cacheInvalidation
		CacheInvalidation *FeatureCacheInvalidation `json:"cacheInvalidation,omitempty"`
	} `json:"capabilities,omitempty"`

	// Name name of the flag management system
	Name *string `json:"name,omitempty"`
}

// Context Context information for flag evaluation
type Context = map[string]interface{}

// ErrorDetails An error description for logging or other needs
type ErrorDetails = string

// EvaluationFailure Flag evaluation failure response
type EvaluationFailure struct {
	// ErrorCode OpenFeature compatible error code. See https://openfeature.dev/specification/types#error-code
	ErrorCode EvaluationFailureErrorCode `json:"errorCode"`

	// ErrorDetails An error description for logging or other needs
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`

	// Key Feature flag key
	Key Key `json:"key"`
}

// EvaluationFailureErrorCode OpenFeature compatible error code. See https://openfeature.dev/specification/types#error-code
type EvaluationFailureErrorCode string

// EvaluationRequest Flag evaluation request
type EvaluationRequest struct {
	// Context Context information for flag evaluation
	Context *Context `json:"context,omitempty"`
}

// EvaluationSuccess defines model for evaluationSuccess.
type EvaluationSuccess struct {
	// Key Feature flag key
	Key *Key `json:"key,omitempty"`

	// Metadata Arbitrary metadata supporting flag evaluation
	Metadata *map[string]EvaluationSuccess_Metadata_AdditionalProperties `json:"metadata,omitempty"`

	// Reason An OpenFeature reason for the evaluation
	Reason *EvaluationSuccessReason `json:"reason,omitempty"`

	// Variant Variant of the evaluated flag value
	Variant *string `json:"variant,omitempty"`
	union   json.RawMessage
}

// EvaluationSuccessMetadata0 defines model for .
type EvaluationSuccessMetadata0 = bool

// EvaluationSuccessMetadata1 defines model for .
type EvaluationSuccessMetadata1 = string

// EvaluationSuccessMetadata2 defines model for .
type EvaluationSuccessMetadata2 = float32

// EvaluationSuccess_Metadata_AdditionalProperties defines model for evaluationSuccess.metadata.AdditionalProperties.
type EvaluationSuccess_Metadata_AdditionalProperties struct {
	union json.RawMessage
}

// EvaluationSuccessReason An OpenFeature reason for the evaluation
type EvaluationSuccessReason string

// FeatureCacheInvalidation Configuration for the cache cacheInvalidation
type FeatureCacheInvalidation struct {
	// Polling Configuration of the polling for the featureCacheInvalidation
	Polling *FeatureCacheInvalidationPolling `json:"polling,omitempty"`
}

// FeatureCacheInvalidationPolling Configuration of the polling for the featureCacheInvalidation
type FeatureCacheInvalidationPolling struct {
	// Enabled set to true if the remote flag management system is supporting polling
	Enabled *bool `json:"enabled,omitempty"`

	// MinPollingInterval minimum polling interval (in millisecond) supported by the flag management system. The provider should ensure not to set any polling value under this minimum.
	MinPollingInterval *float32 `json:"minPollingInterval,omitempty"`
}

// FlagNotFound Flag not found response
type FlagNotFound struct {
	ErrorCode FlagNotFoundErrorCode `json:"errorCode"`

	// ErrorDetails An error description for logging or other needs
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`

	// Key Feature flag key
	Key Key `json:"key"`
}

// FlagNotFoundErrorCode defines model for FlagNotFound.ErrorCode.
type FlagNotFoundErrorCode string

// FloatFlag A float typed flag value
type FloatFlag struct {
	// Value Flag evaluation result
	Value float32 `json:"value"`
}

// GeneralErrorResponse A general error response from the service
type GeneralErrorResponse struct {
	// ErrorDetails An error description for logging or other needs
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`
}

// IntegerFlag An integer typed flag value
type IntegerFlag struct {
	// Value Flag evaluation result
	Value int `json:"value"`
}

// Key Feature flag key
type Key = string

// ObjectFlag An object typed flag value
type ObjectFlag struct {
	// Value Flag evaluation result
	Value map[string]interface{} `json:"value"`
}

// StringFlag A string typed flag value
type StringFlag struct {
	// Value Flag evaluation result
	Value string `json:"value"`
}

// V1GeneralErrorResponse defines model for v1GeneralErrorResponse.
type V1GeneralErrorResponse struct {
	ErrorCode    V1GeneralErrorResponseErrorCode `json:"errorCode"`
	ErrorDetails string                          `json:"errorDetails"`
}

// V1GeneralErrorResponseErrorCode defines model for V1GeneralErrorResponse.ErrorCode.
type V1GeneralErrorResponseErrorCode string

// V1Percentage defines model for v1Percentage.
type V1Percentage struct {
	Value *map[string]float64 `json:"value,omitempty"`
}

// V1ProgressiveRollout defines model for v1ProgressiveRollout.
type V1ProgressiveRollout struct {
	End     *V1ProgressiveRolloutStep `json:"end,omitempty"`
	Initial *V1ProgressiveRolloutStep `json:"initial,omitempty"`
}

// V1ProgressiveRolloutStep defines model for v1ProgressiveRolloutStep.
type V1ProgressiveRolloutStep struct {
	DateValue       *string  `json:"dateValue,omitempty"`
	PercentageValue *float64 `json:"percentageValue,omitempty"`
	VariationValue  *string  `json:"variationValue,omitempty"`
}

// V1Rule defines model for v1Rule.
type V1Rule struct {
	DisableValue            *bool                 `json:"disableValue,omitempty"`
	Name                    string                `json:"name"`
	PercentageValue         *V1Percentage         `json:"percentageValue,omitempty"`
	ProgressiveRolloutValue *V1ProgressiveRollout `json:"progressiveRolloutValue,omitempty"`
	Query                   *string               `json:"query,omitempty"`
	VariationResult         string                `json:"variationResult"`
}

// V1RuleUpdateResponse defines model for v1RuleUpdateResponse.
type V1RuleUpdateResponse struct {
	Result bool `json:"result"`
}

// GetOfrepV1ConfigurationParams defines parameters for GetOfrepV1Configuration.
type GetOfrepV1ConfigurationParams struct {
	// IfNoneMatch The request will be processed only if ETag doesn't match any of the values listed.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`
}

// PostOfrepV1EvaluateFlagsParams defines parameters for PostOfrepV1EvaluateFlags.
type PostOfrepV1EvaluateFlagsParams struct {
	// IfNoneMatch The request will be processed only if ETag doesn't match any of the values listed.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`
}

// PostOfrepV1EvaluateFlagsJSONRequestBody defines body for PostOfrepV1EvaluateFlags for application/json ContentType.
type PostOfrepV1EvaluateFlagsJSONRequestBody = BulkEvaluationRequest

// PostOfrepV1EvaluateFlagsKeyJSONRequestBody defines body for PostOfrepV1EvaluateFlagsKey for application/json ContentType.
type PostOfrepV1EvaluateFlagsKeyJSONRequestBody = EvaluationRequest

// UserFlexFeatureServiceRuleUpdateJSONRequestBody defines body for UserFlexFeatureServiceRuleUpdate for application/json ContentType.
type UserFlexFeatureServiceRuleUpdateJSONRequestBody = UserFlexFeatureServiceRuleUpdateBody

// AsEvaluationSuccess returns the union data inside the BulkEvaluationSuccess_Flags_Item as a EvaluationSuccess
func (t BulkEvaluationSuccess_Flags_Item) AsEvaluationSuccess() (EvaluationSuccess, error) {
	var body EvaluationSuccess
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvaluationSuccess overwrites any union data inside the BulkEvaluationSuccess_Flags_Item as the provided EvaluationSuccess
func (t *BulkEvaluationSuccess_Flags_Item) FromEvaluationSuccess(v EvaluationSuccess) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvaluationSuccess performs a merge with any union data inside the BulkEvaluationSuccess_Flags_Item, using the provided EvaluationSuccess
func (t *BulkEvaluationSuccess_Flags_Item) MergeEvaluationSuccess(v EvaluationSuccess) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEvaluationFailure returns the union data inside the BulkEvaluationSuccess_Flags_Item as a EvaluationFailure
func (t BulkEvaluationSuccess_Flags_Item) AsEvaluationFailure() (EvaluationFailure, error) {
	var body EvaluationFailure
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvaluationFailure overwrites any union data inside the BulkEvaluationSuccess_Flags_Item as the provided EvaluationFailure
func (t *BulkEvaluationSuccess_Flags_Item) FromEvaluationFailure(v EvaluationFailure) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvaluationFailure performs a merge with any union data inside the BulkEvaluationSuccess_Flags_Item, using the provided EvaluationFailure
func (t *BulkEvaluationSuccess_Flags_Item) MergeEvaluationFailure(v EvaluationFailure) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t BulkEvaluationSuccess_Flags_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BulkEvaluationSuccess_Flags_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBooleanFlag returns the union data inside the EvaluationSuccess as a BooleanFlag
func (t EvaluationSuccess) AsBooleanFlag() (BooleanFlag, error) {
	var body BooleanFlag
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBooleanFlag overwrites any union data inside the EvaluationSuccess as the provided BooleanFlag
func (t *EvaluationSuccess) FromBooleanFlag(v BooleanFlag) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBooleanFlag performs a merge with any union data inside the EvaluationSuccess, using the provided BooleanFlag
func (t *EvaluationSuccess) MergeBooleanFlag(v BooleanFlag) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsStringFlag returns the union data inside the EvaluationSuccess as a StringFlag
func (t EvaluationSuccess) AsStringFlag() (StringFlag, error) {
	var body StringFlag
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStringFlag overwrites any union data inside the EvaluationSuccess as the provided StringFlag
func (t *EvaluationSuccess) FromStringFlag(v StringFlag) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStringFlag performs a merge with any union data inside the EvaluationSuccess, using the provided StringFlag
func (t *EvaluationSuccess) MergeStringFlag(v StringFlag) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIntegerFlag returns the union data inside the EvaluationSuccess as a IntegerFlag
func (t EvaluationSuccess) AsIntegerFlag() (IntegerFlag, error) {
	var body IntegerFlag
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIntegerFlag overwrites any union data inside the EvaluationSuccess as the provided IntegerFlag
func (t *EvaluationSuccess) FromIntegerFlag(v IntegerFlag) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIntegerFlag performs a merge with any union data inside the EvaluationSuccess, using the provided IntegerFlag
func (t *EvaluationSuccess) MergeIntegerFlag(v IntegerFlag) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsFloatFlag returns the union data inside the EvaluationSuccess as a FloatFlag
func (t EvaluationSuccess) AsFloatFlag() (FloatFlag, error) {
	var body FloatFlag
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFloatFlag overwrites any union data inside the EvaluationSuccess as the provided FloatFlag
func (t *EvaluationSuccess) FromFloatFlag(v FloatFlag) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFloatFlag performs a merge with any union data inside the EvaluationSuccess, using the provided FloatFlag
func (t *EvaluationSuccess) MergeFloatFlag(v FloatFlag) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsObjectFlag returns the union data inside the EvaluationSuccess as a ObjectFlag
func (t EvaluationSuccess) AsObjectFlag() (ObjectFlag, error) {
	var body ObjectFlag
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObjectFlag overwrites any union data inside the EvaluationSuccess as the provided ObjectFlag
func (t *EvaluationSuccess) FromObjectFlag(v ObjectFlag) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObjectFlag performs a merge with any union data inside the EvaluationSuccess, using the provided ObjectFlag
func (t *EvaluationSuccess) MergeObjectFlag(v ObjectFlag) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t EvaluationSuccess) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Key != nil {
		object["key"], err = json.Marshal(t.Key)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key': %w", err)
		}
	}

	if t.Metadata != nil {
		object["metadata"], err = json.Marshal(t.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'metadata': %w", err)
		}
	}

	if t.Reason != nil {
		object["reason"], err = json.Marshal(t.Reason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reason': %w", err)
		}
	}

	if t.Variant != nil {
		object["variant"], err = json.Marshal(t.Variant)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'variant': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *EvaluationSuccess) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &t.Key)
		if err != nil {
			return fmt.Errorf("error reading 'key': %w", err)
		}
	}

	if raw, found := object["metadata"]; found {
		err = json.Unmarshal(raw, &t.Metadata)
		if err != nil {
			return fmt.Errorf("error reading 'metadata': %w", err)
		}
	}

	if raw, found := object["reason"]; found {
		err = json.Unmarshal(raw, &t.Reason)
		if err != nil {
			return fmt.Errorf("error reading 'reason': %w", err)
		}
	}

	if raw, found := object["variant"]; found {
		err = json.Unmarshal(raw, &t.Variant)
		if err != nil {
			return fmt.Errorf("error reading 'variant': %w", err)
		}
	}

	return err
}

// AsEvaluationSuccessMetadata0 returns the union data inside the EvaluationSuccess_Metadata_AdditionalProperties as a EvaluationSuccessMetadata0
func (t EvaluationSuccess_Metadata_AdditionalProperties) AsEvaluationSuccessMetadata0() (EvaluationSuccessMetadata0, error) {
	var body EvaluationSuccessMetadata0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvaluationSuccessMetadata0 overwrites any union data inside the EvaluationSuccess_Metadata_AdditionalProperties as the provided EvaluationSuccessMetadata0
func (t *EvaluationSuccess_Metadata_AdditionalProperties) FromEvaluationSuccessMetadata0(v EvaluationSuccessMetadata0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvaluationSuccessMetadata0 performs a merge with any union data inside the EvaluationSuccess_Metadata_AdditionalProperties, using the provided EvaluationSuccessMetadata0
func (t *EvaluationSuccess_Metadata_AdditionalProperties) MergeEvaluationSuccessMetadata0(v EvaluationSuccessMetadata0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEvaluationSuccessMetadata1 returns the union data inside the EvaluationSuccess_Metadata_AdditionalProperties as a EvaluationSuccessMetadata1
func (t EvaluationSuccess_Metadata_AdditionalProperties) AsEvaluationSuccessMetadata1() (EvaluationSuccessMetadata1, error) {
	var body EvaluationSuccessMetadata1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvaluationSuccessMetadata1 overwrites any union data inside the EvaluationSuccess_Metadata_AdditionalProperties as the provided EvaluationSuccessMetadata1
func (t *EvaluationSuccess_Metadata_AdditionalProperties) FromEvaluationSuccessMetadata1(v EvaluationSuccessMetadata1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvaluationSuccessMetadata1 performs a merge with any union data inside the EvaluationSuccess_Metadata_AdditionalProperties, using the provided EvaluationSuccessMetadata1
func (t *EvaluationSuccess_Metadata_AdditionalProperties) MergeEvaluationSuccessMetadata1(v EvaluationSuccessMetadata1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEvaluationSuccessMetadata2 returns the union data inside the EvaluationSuccess_Metadata_AdditionalProperties as a EvaluationSuccessMetadata2
func (t EvaluationSuccess_Metadata_AdditionalProperties) AsEvaluationSuccessMetadata2() (EvaluationSuccessMetadata2, error) {
	var body EvaluationSuccessMetadata2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvaluationSuccessMetadata2 overwrites any union data inside the EvaluationSuccess_Metadata_AdditionalProperties as the provided EvaluationSuccessMetadata2
func (t *EvaluationSuccess_Metadata_AdditionalProperties) FromEvaluationSuccessMetadata2(v EvaluationSuccessMetadata2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvaluationSuccessMetadata2 performs a merge with any union data inside the EvaluationSuccess_Metadata_AdditionalProperties, using the provided EvaluationSuccessMetadata2
func (t *EvaluationSuccess_Metadata_AdditionalProperties) MergeEvaluationSuccessMetadata2(v EvaluationSuccessMetadata2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t EvaluationSuccess_Metadata_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EvaluationSuccess_Metadata_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOfrepV1Configuration request
	GetOfrepV1Configuration(ctx context.Context, params *GetOfrepV1ConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOfrepV1EvaluateFlagsWithBody request with any body
	PostOfrepV1EvaluateFlagsWithBody(ctx context.Context, params *PostOfrepV1EvaluateFlagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOfrepV1EvaluateFlags(ctx context.Context, params *PostOfrepV1EvaluateFlagsParams, body PostOfrepV1EvaluateFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOfrepV1EvaluateFlagsKeyWithBody request with any body
	PostOfrepV1EvaluateFlagsKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOfrepV1EvaluateFlagsKey(ctx context.Context, key string, body PostOfrepV1EvaluateFlagsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserFlexFeatureServiceRuleUpdateWithBody request with any body
	UserFlexFeatureServiceRuleUpdateWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserFlexFeatureServiceRuleUpdate(ctx context.Context, key string, body UserFlexFeatureServiceRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetOfrepV1Configuration(ctx context.Context, params *GetOfrepV1ConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOfrepV1ConfigurationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOfrepV1EvaluateFlagsWithBody(ctx context.Context, params *PostOfrepV1EvaluateFlagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOfrepV1EvaluateFlagsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOfrepV1EvaluateFlags(ctx context.Context, params *PostOfrepV1EvaluateFlagsParams, body PostOfrepV1EvaluateFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOfrepV1EvaluateFlagsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOfrepV1EvaluateFlagsKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOfrepV1EvaluateFlagsKeyRequestWithBody(c.Server, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOfrepV1EvaluateFlagsKey(ctx context.Context, key string, body PostOfrepV1EvaluateFlagsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOfrepV1EvaluateFlagsKeyRequest(c.Server, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserFlexFeatureServiceRuleUpdateWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserFlexFeatureServiceRuleUpdateRequestWithBody(c.Server, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserFlexFeatureServiceRuleUpdate(ctx context.Context, key string, body UserFlexFeatureServiceRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserFlexFeatureServiceRuleUpdateRequest(c.Server, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetOfrepV1ConfigurationRequest generates requests for GetOfrepV1Configuration
func NewGetOfrepV1ConfigurationRequest(server string, params *GetOfrepV1ConfigurationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ofrep/v1/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

	}

	return req, nil
}

// NewPostOfrepV1EvaluateFlagsRequest calls the generic PostOfrepV1EvaluateFlags builder with application/json body
func NewPostOfrepV1EvaluateFlagsRequest(server string, params *PostOfrepV1EvaluateFlagsParams, body PostOfrepV1EvaluateFlagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOfrepV1EvaluateFlagsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostOfrepV1EvaluateFlagsRequestWithBody generates requests for PostOfrepV1EvaluateFlags with any type of body
func NewPostOfrepV1EvaluateFlagsRequestWithBody(server string, params *PostOfrepV1EvaluateFlagsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ofrep/v1/evaluate/flags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

	}

	return req, nil
}

// NewPostOfrepV1EvaluateFlagsKeyRequest calls the generic PostOfrepV1EvaluateFlagsKey builder with application/json body
func NewPostOfrepV1EvaluateFlagsKeyRequest(server string, key string, body PostOfrepV1EvaluateFlagsKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOfrepV1EvaluateFlagsKeyRequestWithBody(server, key, "application/json", bodyReader)
}

// NewPostOfrepV1EvaluateFlagsKeyRequestWithBody generates requests for PostOfrepV1EvaluateFlagsKey with any type of body
func NewPostOfrepV1EvaluateFlagsKeyRequestWithBody(server string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ofrep/v1/evaluate/flags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserFlexFeatureServiceRuleUpdateRequest calls the generic UserFlexFeatureServiceRuleUpdate builder with application/json body
func NewUserFlexFeatureServiceRuleUpdateRequest(server string, key string, body UserFlexFeatureServiceRuleUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserFlexFeatureServiceRuleUpdateRequestWithBody(server, key, "application/json", bodyReader)
}

// NewUserFlexFeatureServiceRuleUpdateRequestWithBody generates requests for UserFlexFeatureServiceRuleUpdate with any type of body
func NewUserFlexFeatureServiceRuleUpdateRequestWithBody(server string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-flex-feature/api/v1/updates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetOfrepV1ConfigurationWithResponse request
	GetOfrepV1ConfigurationWithResponse(ctx context.Context, params *GetOfrepV1ConfigurationParams, reqEditors ...RequestEditorFn) (*GetOfrepV1ConfigurationResponse, error)

	// PostOfrepV1EvaluateFlagsWithBodyWithResponse request with any body
	PostOfrepV1EvaluateFlagsWithBodyWithResponse(ctx context.Context, params *PostOfrepV1EvaluateFlagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOfrepV1EvaluateFlagsResponse, error)

	PostOfrepV1EvaluateFlagsWithResponse(ctx context.Context, params *PostOfrepV1EvaluateFlagsParams, body PostOfrepV1EvaluateFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOfrepV1EvaluateFlagsResponse, error)

	// PostOfrepV1EvaluateFlagsKeyWithBodyWithResponse request with any body
	PostOfrepV1EvaluateFlagsKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOfrepV1EvaluateFlagsKeyResponse, error)

	PostOfrepV1EvaluateFlagsKeyWithResponse(ctx context.Context, key string, body PostOfrepV1EvaluateFlagsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOfrepV1EvaluateFlagsKeyResponse, error)

	// UserFlexFeatureServiceRuleUpdateWithBodyWithResponse request with any body
	UserFlexFeatureServiceRuleUpdateWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserFlexFeatureServiceRuleUpdateResponse, error)

	UserFlexFeatureServiceRuleUpdateWithResponse(ctx context.Context, key string, body UserFlexFeatureServiceRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserFlexFeatureServiceRuleUpdateResponse, error)
}

type GetOfrepV1ConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfigurationResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOfrepV1ConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOfrepV1ConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOfrepV1EvaluateFlagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkEvaluationSuccess
	JSON400      *BulkEvaluationFailure
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOfrepV1EvaluateFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOfrepV1EvaluateFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOfrepV1EvaluateFlagsKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EvaluationSuccess
	JSON400      *EvaluationFailure
	JSON404      *FlagNotFound
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOfrepV1EvaluateFlagsKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOfrepV1EvaluateFlagsKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserFlexFeatureServiceRuleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1RuleUpdateResponse
	JSON400      *V1GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserFlexFeatureServiceRuleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserFlexFeatureServiceRuleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOfrepV1ConfigurationWithResponse request returning *GetOfrepV1ConfigurationResponse
func (c *ClientWithResponses) GetOfrepV1ConfigurationWithResponse(ctx context.Context, params *GetOfrepV1ConfigurationParams, reqEditors ...RequestEditorFn) (*GetOfrepV1ConfigurationResponse, error) {
	rsp, err := c.GetOfrepV1Configuration(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOfrepV1ConfigurationResponse(rsp)
}

// PostOfrepV1EvaluateFlagsWithBodyWithResponse request with arbitrary body returning *PostOfrepV1EvaluateFlagsResponse
func (c *ClientWithResponses) PostOfrepV1EvaluateFlagsWithBodyWithResponse(ctx context.Context, params *PostOfrepV1EvaluateFlagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOfrepV1EvaluateFlagsResponse, error) {
	rsp, err := c.PostOfrepV1EvaluateFlagsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOfrepV1EvaluateFlagsResponse(rsp)
}

func (c *ClientWithResponses) PostOfrepV1EvaluateFlagsWithResponse(ctx context.Context, params *PostOfrepV1EvaluateFlagsParams, body PostOfrepV1EvaluateFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOfrepV1EvaluateFlagsResponse, error) {
	rsp, err := c.PostOfrepV1EvaluateFlags(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOfrepV1EvaluateFlagsResponse(rsp)
}

// PostOfrepV1EvaluateFlagsKeyWithBodyWithResponse request with arbitrary body returning *PostOfrepV1EvaluateFlagsKeyResponse
func (c *ClientWithResponses) PostOfrepV1EvaluateFlagsKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOfrepV1EvaluateFlagsKeyResponse, error) {
	rsp, err := c.PostOfrepV1EvaluateFlagsKeyWithBody(ctx, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOfrepV1EvaluateFlagsKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOfrepV1EvaluateFlagsKeyWithResponse(ctx context.Context, key string, body PostOfrepV1EvaluateFlagsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOfrepV1EvaluateFlagsKeyResponse, error) {
	rsp, err := c.PostOfrepV1EvaluateFlagsKey(ctx, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOfrepV1EvaluateFlagsKeyResponse(rsp)
}

// UserFlexFeatureServiceRuleUpdateWithBodyWithResponse request with arbitrary body returning *UserFlexFeatureServiceRuleUpdateResponse
func (c *ClientWithResponses) UserFlexFeatureServiceRuleUpdateWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserFlexFeatureServiceRuleUpdateResponse, error) {
	rsp, err := c.UserFlexFeatureServiceRuleUpdateWithBody(ctx, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserFlexFeatureServiceRuleUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserFlexFeatureServiceRuleUpdateWithResponse(ctx context.Context, key string, body UserFlexFeatureServiceRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserFlexFeatureServiceRuleUpdateResponse, error) {
	rsp, err := c.UserFlexFeatureServiceRuleUpdate(ctx, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserFlexFeatureServiceRuleUpdateResponse(rsp)
}

// ParseGetOfrepV1ConfigurationResponse parses an HTTP response from a GetOfrepV1ConfigurationWithResponse call
func ParseGetOfrepV1ConfigurationResponse(rsp *http.Response) (*GetOfrepV1ConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOfrepV1ConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOfrepV1EvaluateFlagsResponse parses an HTTP response from a PostOfrepV1EvaluateFlagsWithResponse call
func ParsePostOfrepV1EvaluateFlagsResponse(rsp *http.Response) (*PostOfrepV1EvaluateFlagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOfrepV1EvaluateFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkEvaluationSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BulkEvaluationFailure
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOfrepV1EvaluateFlagsKeyResponse parses an HTTP response from a PostOfrepV1EvaluateFlagsKeyWithResponse call
func ParsePostOfrepV1EvaluateFlagsKeyResponse(rsp *http.Response) (*PostOfrepV1EvaluateFlagsKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOfrepV1EvaluateFlagsKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EvaluationSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EvaluationFailure
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest FlagNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserFlexFeatureServiceRuleUpdateResponse parses an HTTP response from a UserFlexFeatureServiceRuleUpdateWithResponse call
func ParseUserFlexFeatureServiceRuleUpdateResponse(rsp *http.Response) (*UserFlexFeatureServiceRuleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserFlexFeatureServiceRuleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1RuleUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OFREP provider configuration
	// (GET /ofrep/v1/configuration)
	GetOfrepV1Configuration(c *gin.Context, params GetOfrepV1ConfigurationParams)

	// (POST /ofrep/v1/evaluate/flags)
	PostOfrepV1EvaluateFlags(c *gin.Context, params PostOfrepV1EvaluateFlagsParams)

	// (POST /ofrep/v1/evaluate/flags/{key})
	PostOfrepV1EvaluateFlagsKey(c *gin.Context, key string)

	// (POST /user-flex-feature/api/v1/updates/{key})
	UserFlexFeatureServiceRuleUpdate(c *gin.Context, key string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetOfrepV1Configuration operation middleware
func (siw *ServerInterfaceWrapper) GetOfrepV1Configuration(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOfrepV1ConfigurationParams

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOfrepV1Configuration(c, params)
}

// PostOfrepV1EvaluateFlags operation middleware
func (siw *ServerInterfaceWrapper) PostOfrepV1EvaluateFlags(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostOfrepV1EvaluateFlagsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOfrepV1EvaluateFlags(c, params)
}

// PostOfrepV1EvaluateFlagsKey operation middleware
func (siw *ServerInterfaceWrapper) PostOfrepV1EvaluateFlagsKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameter("simple", false, "key", c.Param("key"), &key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOfrepV1EvaluateFlagsKey(c, key)
}

// UserFlexFeatureServiceRuleUpdate operation middleware
func (siw *ServerInterfaceWrapper) UserFlexFeatureServiceRuleUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameter("simple", false, "key", c.Param("key"), &key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserFlexFeatureServiceRuleUpdate(c, key)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/ofrep/v1/configuration", wrapper.GetOfrepV1Configuration)
	router.POST(options.BaseURL+"/ofrep/v1/evaluate/flags", wrapper.PostOfrepV1EvaluateFlags)
	router.POST(options.BaseURL+"/ofrep/v1/evaluate/flags/:key", wrapper.PostOfrepV1EvaluateFlagsKey)
	router.POST(options.BaseURL+"/user-flex-feature/api/v1/updates/:key", wrapper.UserFlexFeatureServiceRuleUpdate)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xabW8bufH/KgTvD/zvAMmSHV+L6p1iy65gWzYkJb1rYBiUdiTxwiX3SK4SNdB3L4bc",
	"XWl3uZaa2G2u6Ks4y+FwOA+/eaC+0LmKEyVBWkN7X6iZryBm7s93BvSVgM9XwGyqYQJ6zecwTgW8SyJm",
	"4a2KNkiXaJWAthzcLp0KwH//T8OC9ugPnR3/Tsa8sz5FLnS7bVENv6dcQ0R7H/zWxxa1mwRoj6rZbzC3",
	"dNuiM6UEMHkl2BJZR2DmmieWK0l7tE+yZYL7IrIQbEnWTKRAWxXZ/NcaB+RLABcZfiEaTCosLQTJ+Nfk",
	"9eweUcBUfBwUDK4YF6kOHPQ2FR/3D1p4QjwwUdLUBQatlb5QUYBXXxKWILXmzAIhcxUBMQnM+YLPiVXE",
	"roDMKgc6fidkAkBW1iam1+moBOTCW/gkgnUnZ+E2dFAD5ge3rY0n7JRirOZyidZxq5dgGRemLue9+4MJ",
	"fzaJPB3ZIyILpYlQyyWXS6I0UXYFmkiAyNSPq5hgp6C6GcbwewrG1kXKSIDEqbA8EeB8xhAuiZJoDb+v",
	"aoy5khY+20POnZNttzWJJul8DiagpGyhcASnkpABm2RzF8A/uIXY/aEk3C9o78PzwkJNtm3r2B25m29R",
	"9ZmZmNZs46xUC+K5kgu+THVmm8zj6/5yNR48kBgsi5hlzaExZwmbccHz/5e5XOytErVwunTAEDPJlhCD",
	"tMRsjIWYMBmRlfqEIZOLCEgfoz/gvkSrNY9AnwRkmK9gKNdM8Ij5k59XXhZoF7V9QY1JFgcUhF+fvxJt",
	"UfjM4kSglB+cb0S0RZeqnZ3fxk97SFsElzdT7uUVlfoFwuVC6ZgVkbsooycNXOR5hOjLAhu+DhNaFA5j",
	"bxXkvwV77xOQWVYkaGVm+UxAdguEyW+EWJBpjJZ76I8ng6fBeHw/pi067Y+vB9Ph6PrpZvDr091wMhmO",
	"rmmLDkfv+7fDy6eL+9F08MuUtuj1YDQY928DFq7b4tlY36fdtuhH2BzagiRVkMZvrQpUw2GYrqfll8Nl",
	"CGEyEyKDzPIBx167RXPYctyiiPvU91DitgPmannR+lIzV/FFpvEMtMfaSvjoGbea6c0ONE2aJEpbjJ0j",
	"olMDMx66anG57+ierMhMJZ65w06m/enwouSrd/3pxV9pi04ebofom5fDSf/t7eCStui70c3o/m+joJuu",
	"meZMBrzivV/IETATo1r31YHt2Iy4X2seyoWe/VGkXFpYYj19BO1CKGaPovRG9KSP28fWgQgylTLjBDXd",
	"mJNCGWCXwQtHcEmQ1FNhNUwTJQQa4ytT5EO2PZgpD206cJXMlzIJi5s1aqaWKiSbCcS66jEGrCvFdQqE",
	"+0M0xMo2FiPc7AdvrrJ6J9KiMc9vN5QW9JqJ+vExlzxO4+JiPKMkP3JJYi4ENzBXMvopPxQiMts8U1mc",
	"kOleQUTMSqUiIiANAoRU7rJ4ZyY3xaEuJEkqcYNdcUMyqU7KZcqfut1ud4cEOd5VUokriUItIso7UvZK",
	"pTJqSCUo3wLXj8z5Oahd3favn0b306er+3ejy+85qe6AI9Alu8WX75H3TPjm5PT89OeDNty1zUuQoJkY",
	"4CWaO4I+yeiyAmvXJGkVO2c1fjQRNudXmQVl3ofsUHLM1l9XpTttZsc9o87MkyqnZOnbyZc5zV5zEG+a",
	"moEW3csuofv75VebuuSx3Xjdvewb8Bm/+qrGyZXXzmQ6NKzYib4+vW5w/SPwKK/3H/rj/t1RcHTsDKWy",
	"M4Sz69MH0HOQli0D8hbKbCp+fetIezRS6UzsVWo5VoTMHxJCq6UGY/gaxkoIldqA8nwmeH4QWWc0sZBQ",
	"F/7ccp9Vv47FsZI76pr0EbPwPldnzcJJYYSC5gjVuqIazdLEOCzyOBvpVgTkBqueKqu9EiWfXxwj/QEV",
	"73xu6wK4osJj2dS9Ztuiv6egN0E5C32NffQfDCV34/q+x0a1+kl6MwDo6sFNs2jddBICJcxTze1mgorw",
	"fPsJv4FNP7WrOvT9qLKR7U+k/zAkN7DBsm6jUt1UFVKMFtqjK2ARaJpbnv7S7j8M2zcu6eQDQncwKuAt",
	"MA36oAiejCCd0vwfHo0Py+OM7hTm9u8EWFmb5Pl9oZxmuUX/du8dZCHgc174oyVBGy/S6UnX5cQEJEs4",
	"7dE3J92TLqYTZldOpx210JB01qed0qgTl5ZgmyadJVq8WFZdl+ZsbKZSe7h9aNWGmKUOfnJ5U9TuBkt5",
	"bgjIKFFcWvKJC0Fm2MgJARGJUp8+VyiIA8Jc93mztDcVRY91i8OI9ug12HvUxPvTUpflVKVZDBa0cW14",
	"WR3TVTF6L4RJtMKGFSKipNhgCzWYsiWJFBj5/5bEzM5XrtnIhHL5xxDBjYWo0S2Hi/ZISWjf4fbcV1go",
	"uh8xyHxsOhOfdbvFxMkPJ1iSiHyS91s2RtnxOzCPCszDnWceOxH3F3OSoV4CLx3Scrshli1JilrEztb3",
	"66VutlkBKM2b7nlDfXS3c8CJ71/vcim5cf1WrCK+4BBh6Jx3T+t83kmWRTZEpE1+Vamb8pK5hggk+p1B",
	"p2Z+cIE27j8MPbc3AamUnvEoApmxYllbundGkNnPL2jXYFMTMKtr2yUTrnsB7Zsbj9dpHDNMSZnpi357",
	"Xokn6x59Pngy+oh7dyCUT8Y6xdtQokwjDDU/NJWD+0GZPLrzZ7Qrx/+PGt1OpPwp+0UcIPwK6WPp1dAk",
	"/NDYiCbZJHCRikqT8x1AS/WVPAglr6W54lGzrrm3LApFyPeNbOdnf6kzGzMLRPCYW6IBbYYR6HaFYb3s",
	"D2OwetO+ZRZ0nfVQRmgGMOTTClw9o5E8q118/LMl42Xf2G+qz7pn5+3uWbv75+npWa/b7XW7f8e6dtff",
	"MAtty+PgnP+7A/N/AaM7Xz7CZnsIqQ2Xy+wnC98C2L4qr2C2A1QsaHdw6kdGu1bD6hT+A6AK/25AhRcD",
	"0xfGK/jvxSqfDV5ES6X3gICCyi8C/0PK7xQpUwO6jT15/tOVDks4ImfqBicByCyj36HfMP6RIPCo32Nu",
	"y4MhFPU1UTI4xQpYvb8PkqXn5/MXleb6SC8sOVxYseiBO6IvuTM0EG8ft/8MAAD//8bnwXxLKwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
